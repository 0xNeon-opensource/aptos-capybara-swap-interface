/// <reference lib="webworker" />

import { DocumentRoute, OFFLINE_DOCUMENT, OFFLINE_REVISION } from 'service-worker/document'
import { BailingPrecacheController } from 'service-worker/precache'
import { toURL } from 'service-worker/utils'
import { registerRoute, setDefaultHandler } from 'workbox-routing'

declare const self: ServiceWorkerGlobalScope

// Precache the assets generated by the build process.
const assets = [
  ...self.__WB_MANIFEST.filter((entry) => {
    const url = toURL(entry)
    // Modern browsers (which implement ServiceWorker) only use variable fonts.
    if (url.includes('woff') && !url.endsWith('.var.woff2')) return false
    return true
  }),
  { revision: OFFLINE_REVISION, url: OFFLINE_DOCUMENT },
]
const controller = new BailingPrecacheController(assets)

// Register handlers for cached assets.
setDefaultHandler(async ({ request }) => (await controller.matchPrecache(request)) || fetch(request))
registerRoute(new DocumentRoute(controller))

// Activate this ServiceWorker as soon as assets are precached.
// This removes already-loaded pages' assets from the precache.
self.addEventListener('install', (event) =>
  event.waitUntil(
    controller.install(event).then(() => {
      return self.skipWaiting()
    })
  )
)
self.addEventListener('activate', (event) => event.waitUntil(controller.activate(event)))
